#!/bin/bash

# TorShift Setup Script
# Author: 0nsec Security Research
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR:${NC} $1"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "This script should not be run as root for security reasons"
    fi
}

# Check distribution
check_distribution() {
    if ! command -v apt &> /dev/null; then
        error "This script requires a Debian/Ubuntu-based system with apt package manager"
    fi
}

# Install system dependencies
install_system_deps() {
    log "Updating package list..."
    sudo apt update

    log "Installing system dependencies..."
    sudo apt install -y \
        tor \
        proxychains4 \
        python3 \
        python3-pip \
        python3-venv \
        curl \
        wget \
        dnsutils

    log "System dependencies installed successfully"
}

# Configure Tor service
configure_tor() {
    log "Configuring Tor service..."
    
    # Backup original torrc
    if [[ -f /etc/tor/torrc ]]; then
        sudo cp /etc/tor/torrc /etc/tor/torrc.backup.$(date +%s)
        log "Original torrc backed up"
    fi

    # Generate Tor password hash
    TOR_PASSWORD="0nsecTorShift2025"
    TOR_HASH=$(echo -n "$TOR_PASSWORD" | tor --hash-password stdin)

    # Create Tor configuration
    sudo tee /etc/tor/torrc > /dev/null <<EOF
# TorShift Configuration
# Generated by setup script

# Control port configuration
ControlPort 9051
HashedControlPassword $TOR_HASH
CookieAuthentication 1

# SOCKS proxy
SOCKSPort 9050

# Circuit configuration
NewCircuitPeriod 120
MaxCircuitDirtiness 300
CircuitBuildTimeout 60

# Directory configuration
DataDirectory /var/lib/tor

# Logging
Log notice syslog
Log info file /var/log/tor/tor.log

# Exit node preferences (focus on privacy-friendly countries)
ExitNodes {us},{gb},{de},{ca},{au},{se},{nl},{ch},{fr},{at},{dk},{fi},{no}
StrictNodes 0

# Exclude problematic countries and nodes
ExcludeExitNodes {cn},{ru},{kp},{ir},{sy},{by},{pk},{bd},{eg},{id},{my},{th},{vn}
ExcludeNodes {cn},{ru},{kp},{ir},{sy},{by},{pk},{bd},{eg},{id},{my},{th},{vn}

# Security settings
UseEntryGuards 1
NumEntryGuards 3
GuardLifetime 30 days

# Bridge configuration (uncomment if needed)
# UseBridges 1
# Bridge obfs4 IP:PORT FINGERPRINT

# Hidden service configuration (if needed)
# HiddenServiceDir /var/lib/tor/hidden_service/
# HiddenServicePort 80 127.0.0.1:8080
EOF

    log "Tor configuration updated"
}

# Setup Python environment
setup_python_env() {
    log "Setting up Python environment..."
    
    # Create virtual environment
    if [[ ! -d "venv" ]]; then
        python3 -m venv venv
        log "Virtual environment created"
    fi

    # Activate virtual environment
    source venv/bin/activate

    # Upgrade pip
    pip install --upgrade pip

    # Install Python dependencies
    if [[ -f "requirements.txt" ]]; then
        pip install -r requirements.txt
        log "Python dependencies installed"
    else
        warn "requirements.txt not found, installing dependencies manually"
        pip install requests stem pysocks urllib3
    fi
}

# Start and enable Tor service
start_tor_service() {
    log "Starting Tor service..."
    
    sudo systemctl daemon-reload
    sudo systemctl enable tor
    sudo systemctl restart tor
    
    # Wait for Tor to start
    sleep 10
    
    if systemctl is-active --quiet tor; then
        log "Tor service started successfully"
    else
        error "Failed to start Tor service"
    fi
}

# Configure ProxyChains
configure_proxychains() {
    log "Configuring ProxyChains..."
    
    # Backup original proxychains.conf
    if [[ -f /etc/proxychains4.conf ]]; then
        sudo cp /etc/proxychains4.conf /etc/proxychains4.conf.backup.$(date +%s)
    fi

    # Create ProxyChains configuration
    sudo tee /etc/proxychains4.conf > /dev/null <<EOF
# TorShift ProxyChains Configuration

strict_chain
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000
localnet 127.0.0.0/255.0.0.0
localnet 10.0.0.0/255.0.0.0
localnet 172.16.0.0/255.240.0.0
localnet 192.168.0.0/255.255.0.0

[ProxyList]
socks5 127.0.0.1 9050
EOF

    log "ProxyChains configured"
}

# Create directories
create_directories() {
    log "Creating necessary directories..."
    
    # Create log directory
    mkdir -p ~/.torshift/logs
    mkdir -p ~/.torshift/configs
    
    # Set proper permissions
    chmod 700 ~/.torshift
    chmod 755 ~/.torshift/logs
    chmod 755 ~/.torshift/configs
    
    log "Directories created"
}

# Test installation and demonstrate functionality
test_installation() {
    log "Testing TorShift installation and IP rotation..."
    
    # Test basic installation
    if python3 torshift.py --verify-install > /dev/null 2>&1; then
        log "✓ Installation verification: PASSED"
    else
        warn "Installation verification had issues, but continuing..."
    fi
    
    # Test IP rotation demo
    log "Running IP rotation demonstration..."
    echo "Current direct IP vs TorShift IP:"
    
    # Show direct IP
    DIRECT_IP=$(curl -s --connect-timeout 10 https://httpbin.org/ip 2>/dev/null | grep -o '"origin":"[^"]*' | cut -d'"' -f4)
    if [[ -n "$DIRECT_IP" ]]; then
        echo "  Direct IP: $DIRECT_IP"
    fi
    
    # Show TorShift IP  
    TORSHIFT_IP=$(timeout 30 python3 torshift.py --execute "curl -s https://httpbin.org/ip" 2>/dev/null | grep -o '"origin":"[^"]*' | cut -d'"' -f4)
    if [[ -n "$TORSHIFT_IP" ]]; then
        echo "  TorShift IP: $TORSHIFT_IP"
        if [[ "$DIRECT_IP" != "$TORSHIFT_IP" ]]; then
            log "✓ IP anonymization: WORKING"
        else
            warn "IP anonymization may need configuration"
        fi
    else
        warn "Could not retrieve TorShift IP - may need manual configuration"
    fi
    
    log "Installation test completed"
}
verify_installation() {
    log "Verifying installation..."
    
    # Check Tor service
    if ! systemctl is-active --quiet tor; then
        error "Tor service is not running"
    fi
    
    # Check Tor ports
    if ! netstat -tln | grep -q ":9050 "; then
        error "Tor SOCKS proxy not listening on port 9050"
    fi
    
    if ! netstat -tln | grep -q ":9051 "; then
        error "Tor control port not listening on port 9051"
    fi
    
    # Check Python dependencies
    if [[ -f "venv/bin/activate" ]]; then
        source venv/bin/activate
        python3 -c "import requests, stem, socks; print('Python dependencies OK')" || error "Python dependencies check failed"
    fi
    
    # Check ProxyChains
    if ! command -v proxychains4 &> /dev/null; then
        error "ProxyChains4 not installed"
    fi
    
    log "Installation verification completed successfully"
}

# Main execution
main() {
    echo -e "${BLUE}"
    echo ""
    echo "████████╗ ██████╗ ██████╗ ███████╗██╗  ██╗██╗███████╗████████╗"
    echo "╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝██║  ██║██║██╔════╝╚══██╔══╝"
    echo "   ██║   ██║   ██║██████╔╝███████╗███████║██║█████╗     ██║   "
    echo "   ██║   ██║   ██║██╔══██╗╚════██║██╔══██║██║██╔══╝     ██║   "
    echo "   ██║   ╚██████╔╝██║  ██║███████║██║  ██║██║██║        ██║   "
    echo "   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   "
    echo ""
    echo -e "${GREEN}                    Setup Script v2.1.0${NC}"
    echo -e "${YELLOW}            Advanced Tor-Based IP Rotation Framework${NC}"
    echo ""
    echo "+------------------------------------------------------------+"
    echo "|                                                            |"
    echo "| [+] This script will install and configure:                |"
    echo "|  - Tor service with security-focused configuration         |"
    echo "|  - ProxyChains4 for command tunneling                      |"
    echo "|  - Python dependencies in virtual environment              |"
    echo "|  - Auto IP rotation every 5 minutes capability             |"
    echo "|  - Proper directory structure and permissions              |"
    echo "|                                                            |"
    echo "|  Security Standards: CWE-200, CWE-319, OWASP ASVS          |"
    echo "|  Purpose: Authorized Security Research & Pen Testing       |"
    echo "+------------------------------------------------------------+"
    echo -e "${NC}"
    
    read -p "Do you want to continue with the installation? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "Installation cancelled by user"
        exit 0
    fi

    check_root
    check_distribution
    
    log "Starting TorShift setup process..."
    
    install_system_deps
    configure_tor
    start_tor_service
    configure_proxychains
    create_directories
    setup_python_env
    verify_installation
    test_installation
    
    echo -e "${GREEN}"
    echo ""
    echo "████████╗ ██████╗ ██████╗ ███████╗██╗  ██╗██╗███████╗████████╗"
    echo "╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝██║  ██║██║██╔════╝╚══██╔══╝"
    echo "   ██║   ██║   ██║██████╔╝███████╗███████║██║█████╗     ██║   "
    echo "   ██║   ██║   ██║██╔══██╗╚════██║██╔══██║██║██╔══╝     ██║   "
    echo "   ██║   ╚██████╔╝██║  ██║███████║██║  ██║██║██║        ██║   "
    echo "   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   "
    echo ""
    echo "+------------------------------------------------------------+"
    echo "|                   Setup Completed Successfully!            |"
    echo "+------------------------------------------------------------+"
    echo "|                                                            |"
    echo "|    TorShift v2.1.0 - Ready for Action!                     |"
    echo "|    NEW: Auto IP Rotation every 5 minutes                   |"
    echo "|    NEW: Restored original ASCII banner                     |"
    echo "|                                                            |"
    echo "|  Quick Start Commands:                                     |"
    echo "|  1. Activate Python environment:                           |"
    echo "|     source venv/bin/activate                               |"
    echo "|                                                            |"
    echo "|  2. Verify installation & see ASCII art:                   |"
    echo "|     python3 torshift.py --verify-install                   |"
    echo "|                                                            |"
    echo "|  3. START AUTO-ROTATION (5 min intervals):                 |"
    echo "|     python3 torshift.py --auto-rotate 300                  |"
    echo "|                                                            |"
    echo "|  3. Execute commands through rotating proxy:               |"
    echo "|     python3 torshift.py --execute 'nmap -sS target.com'    |"
    echo "|                                                            |"
    echo "|  4. Interactive mode with full control:                    |"
    echo "|     python3 torshift.py --interactive                      |"
    echo "|                                                            |"
    echo "|  5. Manual IP rotation:                                    |"
    echo "|     python3 torshift.py --rotate-once                      |"
    echo "|                                                            |"
    echo "|  [+] Documentation:                                        |"
    echo "|     • README.md - Complete guide                           |"
    echo "|                                                            |"
    echo "|  Remember: Only use for authorized security testing!       |"
    echo "|  Compliance: CWE-200, CWE-319, OWASP ASVS, NIST            |"
    echo "+------------------------------------------------------------+"
    echo -e "${NC}"
    
    log "TorShift setup completed successfully"
}

# Run main function
main "$@"
